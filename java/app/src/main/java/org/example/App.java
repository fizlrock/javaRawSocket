/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import static java.util.Arrays.copyOfRange;

import java.util.HexFormat;
import java.util.function.Function;
import java.util.stream.Stream;

public class App {
  public String getGreeting() {
    return "Hello World!";
  }

  static String copyAndToHex(byte[] data, int s, int e) {

    return HexFormat.of().formatHex(copyOfRange(data, s, e));
  }

  static Function<byte[], String> format = b -> HexFormat.of().formatHex(b);

  public static void main(String[] args) {
    if (!FNETLib.init("lo"))
      System.exit(-123);

    byte[] srcIp = { 0x0, 0x0, 0x0, 0x0 };
    byte[] dstIp = { 0x0, 0x0, 0x0, 0x0 };
    byte[] srcMac = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    byte[] dstMac = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    int srcPort = 123;
    int dstPort = 321;

    var udp = new UdpPackage(srcPort, dstPort, "Hey from raw socket".getBytes());

    var ip = IpPackage.from(dstIp, srcIp, udp);

    var frame = new EthernetFrame("000000000000", "000000000000", ip);

    var bytes = frame.toBytes();

    System.out.println(HexFormat.of().formatHex(bytes));
    int send_result = FNETLib.sendTo(bytes);
    System.out.println(send_result);

  }

  public static void listen() {

    Stream.generate(FNETLib::recvFrame)
        .map(EthernetFrame::new)
        .filter(f -> f.dstMacHex.equals("000000000000"))
        .filter(f -> f.typeHex.equals("0800"))
        .map(IpPackage::new)
        .filter(p -> p.type.equals("UDP"))
        // .peek(System.out::println)
        .map(UdpPackage::new)
        .filter(u -> u.dstPort == 43521)
        .map(UdpPackage::getPayload)
        .map(String::new)
        .limit(100)
        .forEach(System.out::println);
  }

}
